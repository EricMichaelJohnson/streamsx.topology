<% 
 # Enable or disable checkpointing, including support for the necessary locking.

 # Checkpointing should be enabled if the operator is in a consistent region,
 # or has checkpointing configured.  Also, the operator must be stateful,
 # otherwise no checkpointing is needed.

 my $isInConsistentRegion = $model->getContext()->getOptionalContext("ConsistentRegion");
 my $ckptKind = $model->getContext()->getCheckpointingKind();
 my $pyStateful = $model->getParameterByName("pyStateful");
 my $stateful = 0;
 if (defined($pyStateful)) {
   $stateful = $pyStateful->getValueAt(0)->getSPLExpression() eq "true";
 }
 else {
   # no pyStateful parameter.  Try calling splpy_OperatorCallable().
   if (defined &splpy_OperatorCallable) {
     $stateful = splpy_OperatorCallable()
   }
 }

 my $isCheckpointing = $stateful && ($isInConsistentRegion or $ckptKind ne "none");
%>

  static const bool isInConsistentRegion = <%= $isInConsistentRegion ? "true" : "false" %>;
  // True if checkpoint is enabled, whether directly or though consistent
  // region.
  static const bool isCheckpointing = <%=$isCheckpointing ? "true" : "false" %>;

  typedef OptionalConsistentRegionContextImpl<isInConsistentRegion> OptionalConsistentRegionContext;
  typedef OptionalConsistentRegionContext::Permit AutoConsistentRegionPermit;
#if 0
  typedef OptionalValue<isCheckpointing, StateHandler *> OptionalStateHandler;
  // TODO remove
  typedef OptionalValue<isCheckpointing, SPL::Mutex> OptionalMutex;
  // TODO remove
  typedef OptionalAutoMutexImpl<isCheckpointing> OptionalAutoMutex;
#endif
  typedef OptionalAutoLockImpl<isCheckpointing> OptionalAutoLock;

