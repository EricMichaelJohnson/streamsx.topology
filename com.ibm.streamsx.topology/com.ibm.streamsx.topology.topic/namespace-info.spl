/*
# Licensed Materials - Property of IBM
# Copyright IBM Corp. 2015  
 */
 
/**
 * Topic based publish-subscribe model for streams.
 * + Publish-subscribe Overview
 * Applications can publish streams to topics which
 * can then be subscribed to by other applications
 * (or even the same application). Publish-subscribe
 * works across applications written in SPL and
 * those written using application APIs
 * provided by this toolkit.
 *
 * A subscriber matches a publisher if their topic
 * and stream type are an exact match to that of the publisher.
 * It is recommended that a single stream type is used for a topic.
 *
 * A topic is a `rstring` value (encoded with UTF-8), it is recommended that the
 * [http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#appendix-a|MQTT topic style]
 * is used, and that topic names do not
 * include wild-cards. Future versions may support subscription
 * by MQTT style wild cards (e.g. `cdr/voice/\*`).
 * 
 * Publish-subscribe is a many to many relationship,
 * any number of publishers can publish to the same topic
 * and stream type, and there can be many subscribers to a topic.
 *
 * For example a telco ingest application may process
 * Call Detail Records from network switches and publish processed
 * records on multiple topics, `cdr/voice/normal`, `cdr/voice/dropped`, `cdr/sms`, etc.
 * by publishing each processed stream with its own topic.
 * Then a dropped call analytic application would subscribe to the
 * `cdr/voice/dropped` topic.
 *
 * Publish-subscribe is dynamic, using IBM Streams
 * dynamic connections, an application
 * can be submitted that subscribes to topics
 * published by other already running applications.
 * Once the new application has initialized, it will
 * start consuming tuples from published streams from existing applications.
 * And any stream the new application publishes will be subscribed to
 * by existing applications where the topic and stream type matches.
 *
 * An application only receives tuples that are published while
 * it is connected, thus tuples are lost during a connection
 * failure.
 * 
 * # SPL Publish-Subscribe
 * An SPL application uses [Publish] to publish a stream to a topic, and [Subscribe]
 * to subscribe to a topic.
 *
 * # Java & Scala Publish-Subscribe
 * A Java application uses [../../javadoc/com/ibm/streamsx/topology/TStream.html#publish(java.lang.String)|TStream.publish(topic)]
 * to publish streams.
 * 
 * # Interchangeable Stream Types
 * 
 * Published streams can be subscribed to by IBM Streams applications
 * written in different languages, by ensuring common stream types (schemas).
 * 
 * * SPL Tuples
 *   * SPL : SPL schema of the stream.
 *   * Java : [../../javadoc/com/ibm/streamsx/topology/spl/SPLStream.html|SPLStream] with a schema matching the SPL schema.
 *   * Scala : `com.ibm.streamsx.topology.spl.SPLStream` with a schema matching the SPL schema.
 * * JSON tuples
 *   * SPL : [com.ibm.streamsx.topology::Json]  
 *   * Java: `TStream<JSONObject>`.
       See [../../javadoc/com/ibm/streamsx/topology/json/package-summary.html#package_description|com.ibm.streamsx.topology.json].
 *   * Scala: `TStream\[JSONObject\]`
 * * String tuples
 *   * SPL : [com.ibm.streamsx.topology::String]
 *   * Java: `TStream<String>`
 *   * Scala: `TStream\[String\]`
 * * XML tuples
 *   * SPL : [com.ibm.streamsx.topology::XML]
 *   * Java: `TStream<com.ibm.streams.operator.types.XML>`
 *   * Java: `TStream\[com.ibm.streams.operator.types.XML\]`
 * * Binary tuples
 *   * SPL : [com.ibm.streamsx.topology::Blob]
 *   * Java: `TStream<com.ibm.streams.operator.types.Blob>`
 *   * Scala: `TStream\[com.ibm.streams.operator.types.Blob\]`
 *
 * # Behavior with parallel regions
 * 
 * Topic publish-subscribe model was changed for releases 1.1.X
 * to have intuitive behavior when the publisher or subscriber
 * is in a parallel region (with width > 1).
 * 
 * *It is recommended that if either publisher or subscriber is
 * in a parallel region then applications should be compiled against
 * released versions of this toolkit*:
 *  * 1.1.x with x >= 6
 *  * 1.2.x with x >= 6
 *
 * The intuitive case is that parallel regions are used to partition tuple processing across the channels,
 * so that each channel processes a subset of the tuples, and each tuple is processed by a single channel.
 * 
 * Any subscriber connecting to a publisher must then process the complete output from the publisher
 * and only process each published tuple only once. For example if a publisher is in a parallel region
 * with width three, then there are three published channels. A connecting subscriber with width two
 * will have two subscribing channels. Each published channel must connect to a single subscribing channel,
 * and in this case one subscriber channel will connect to two published channels and the other to the remaining published channel.
 *
 * | Publisher | Subscriber | Behavior |
 * | ------------ | -------------|-----------
 * | *not-parallel* | *not-parallel* | Single connection between the publisher and subscriber containing all the tuples |
 * | *not-parallel* | *parallel(N)* | One and only one of the N subscribers connects to the single publisher and thus the subscriber region correctly processes the tuples once.  Note that which subscriber channel processes the single published channel is not defined, it could be any of 0,1,...,N-1. |
 * | *parallel(M)* | *not-parallel* | Single subscriber connects to each of the M publishers so that the subscriber region will process all the the published tuples once. |
 * | *parallel(M)* | *parallel(N)* | Each published channel is connected to a single subscribe channel with channel number `publish channel % N`. Thus the subscriber region processes the tuples once. |

 * **Note** *It's important to remember there may be multiple applications publishing and/or subscribing to the same topic and thus publish/subscribe must work in all combinations,
 * e.g. there may be a publishers to the same topic of non-parallel, parallel(5) and parallel(3), and subscribers of non-parallel and parallel(7). This is especially true in a microservices style
 * architecture where analytic applications may come and go and there may not be pre-assigned agreement that publisher and subscribers will have matching channel numbers.*
 * 
 * + Relationship to Export & Import
 * Publish-subscribe is a simplification of IBM Streams `Export` and `Import`.
 * 
 * It is recommended that SPL applications do not use stream properties for
 * `Export` that start with `__spl_` (double underscore - spl - underscore)
 * to avoid clashes with functionality provided by this toolkit.
 * # Details
 * [Publish] is a composite operator that invokes an `spl.adapter::Export` operator
 * using these stream properties:
 * * `int64 __spl_version`: Version of the publish properties scheme, set to.
 *   * unset - Initial version - 1.1.2 release
 *   * `2` - Second version: `__spl_version >= 2`
 * * `rstring __spl_exportType` : Set to the literal `topic` for SPL publish, `topic.java` for publishing by a Java class.
 * * `rstring __spl_topic` : Set to the topic to publish to.
 * * `rstring __spl_allowFilter` : Set to `true` if the [Publish] operator allows filters, otherwise `false`. Earlier releases have the value missing indicating filters are allowed.
 *   * Set if:`__spl_version >= 2`
 * * `rstring __spl_class` : Set to the Java class of the stream when `__spl_exportType` is `topic.java`, otherwise unset.
 * * `int64 __spl_channel` : Set to the publisher's parallel channel index returned by `getChannel()`.
 *   * Set if:`__spl_version >= 2`
 * * `int64 __spl_maxChannels` : Set to the publisher's maximum number of parallel channels returned by `getMaxChannels()`.
 *   * Set if:`__spl_version >= 2`
 *
 * [Subscribe] is a composite operator that invokes an `spl.adapter::Import` operator
 * using a subscription to match the published topics.
*/

namespace com.ibm.streamsx.topology.topic;

