/*
# Licensed Materials - Property of IBM
# Copyright IBM Corp. 2015,2016
 */
namespace com.ibm.streamsx.topology.topic ;

/**
 * Publish a stream to a topic. Allows other IBM Streams
 * applications to subscribe to the input stream, including
 * those written in different languages.
 * See [namespace:com.ibm.streamsx.topology.topic] for details.
 * @input In Stream to be published as a topic.
 * @param topic Topic to publish stream to.
 * @exclude
*/
public composite PublishJava(input In )
{
	param
		expression<rstring> $topic ;
		expression<rstring> $class ;
	graph
		() as ExportTopic = Export(In)
		{
                   param
                     properties :
                    {
                      __spl_version = 2,
                      __spl_exportType = "topic.java",
                      __spl_topic = $topic,
                      __spl_class = $class,
                      __spl_allowFilter = "false",
                      __spl_channel = getChannel(),
                      __spl_maxChannels = getMaxChannels()
                    } ;
		}
}

/**
 * Subscribe to a topic.
 * Generates a stream that is subscribed, through
 * IBM Streams dynamic connections, to all streams
 * published to the same `topic` and `streamType`.
 * See [namespace:com.ibm.streamsx.topology.topic] for details.
 *
 * @output Topic Subscription to `topic`.
 * @param topic Topic to subscribe to.
 * @param streamType Type of output stream `Topic`.
 * @exclude
*/
public composite SubscribeJava(output Topic )
{
	param		
		expression<rstring> $topic ;
		expression<rstring> $class ;
		type $streamType ;
	graph
         stream<$streamType> TopicImport = Import()
         {
           param
              // Initially match nothing, the initialization
              // of the no-op Filter sets the expression.
              subscription : __spl_exportType == "none";
         }

         // Use a Filter to dynamically set the subscription
         // expression based upon the UDP state of this invocation.
         stream<TopicImport> Topic = Filter(TopicImport) {
             logic state:
               int32 rc = setSubscribeSubscription(getTopicJavaSubscription($topic, $class));
         }
}

/*
 * @exclude
*/
rstring getTopicJavaSubscription(rstring topic, rstring class) {
     return "( __spl_exportType == \"topic.java\" ) && ( __spl_topic == \"" + topic + "\" ) && ( __spl_class == \"" + class + "\" )";
}
