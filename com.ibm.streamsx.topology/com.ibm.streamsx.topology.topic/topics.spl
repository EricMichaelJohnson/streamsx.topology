/*
# Licensed Materials - Property of IBM
# Copyright IBM Corp. 2015,2016
 */
namespace com.ibm.streamsx.topology.topic ;

/**
 * Publish a stream to a topic. Allows other IBM Streams
 * applications to subscribe to the input stream, including
 * those written in different languages.
 * See [namespace:com.ibm.streamsx.topology.topic] for details.
 * @input In Stream to be published as a topic.
 * @param topic Topic to publish stream to.
 * @param allowFilter True if filters can be pushed from
 *  subscribing SPL applications. Optional, defaults to `false`.
*/
public composite Publish(input In )
{
	param
		expression<rstring> $topic ;
        expression<boolean> $allowFilter : false;
	graph
		() as ExportTopic = Export(In)
		{
                param
                  properties :
                  {
                     __spl_version = 2,
                     __spl_exportType = "topic",
                     __spl_topic = $topic,
                     __spl_allowFilter = $allowFilter ? "true" : "false",
                     __spl_channel = getChannel(),
                     __spl_maxChannels = getMaxChannels()
                  };
                  allowFilter: $allowFilter;
		}

}

/**
 * Subscribe to a topic.
 * Generates a stream that is subscribed, through
 * IBM Streams dynamic connections, to all streams
 * published to the same `topic` and `streamType`.
 * See [namespace:com.ibm.streamsx.topology.topic] for details.
 
 * @output Topic Subscription to `topic`.
 * @param topic Topic to subscribe to.
 * @param streamType Type of output stream `Topic`.
*/
public composite Subscribe(output Topic )
{
	param		
		expression<rstring> $topic ;
		type $streamType ;
	graph
         stream<$streamType> TopicImport = Import()
         {
           param
              // Initially match nothing, the initialization
              // of the no-op Filter sets the expression.
              subscription : __spl_exportType == "none";
         }

         // Use a Filter to dynamically set the subscription
         // expression based upon the UDP state of this invocation.
         stream<TopicImport> Topic = Filter(TopicImport) {
             logic state:
               int32 rc = setSubscribeSubscription(getTopicSubscription($topic));
         }
}

/**
 * Get the subscription that matches a topic for
 * topic based subscription.
 *
 * This is a low-level function that allows applications
 * to build custom composites with functionality similar
 * to [Subscribe]. The preference should be to
 * use [Subscribe] where possible.
 *  
 * @param topic Topic to subscribe to.
*/
public rstring getTopicSubscription(rstring topic) {
  return "( __spl_exportType == \"topic\" ) && ( __spl_topic == " + makeRStringLiteral(topic) + " )";
}

/**
 * Take a subscription and modify it to account for
 * parallel regions in the publisher or subscriber.
 *
 * This is a low-level function that allows applications
 * to build custom composites with functionality similar
 * to [Subscribe] or [FilteredSubscribe]. The preference should be to
 * use [Subscribe] or [FilteredSubscribe] where possible.
 *  
 * @param subscription Base subscription.
*/
public rstring addUDPSubscription(rstring subscription) {
    mutable rstring udpSub = subscription + " && ";

    // Subscribe to non-udp if channel 0
    if (getChannel() == 0)
          udpSub = udpSub + "( (  __spl_channel == -1 ) || ";

     // subscribe to channel
     udpSub = udpSub 
                 // Publisher is UDP
                 + "( "
                 + "  __spl_channel % "
                 + (rstring) getMaxChannels()
                 + " == " 
                 + (rstring) getChannel()
                 + " )";

     if (getChannel() == 0)
       udpSub = udpSub + " )";

     return udpSub;
}

/**
 * Set a subscription expression adding in UDP
 * channel based matching if the subscriber
 * is in a paralel region.
 * @param subscription Subscription to be set on input port
 * connected to `Import` operator.
*/
public stateful int32 setSubscribeSubscription(rstring subscription) {
    // None-UDP or a single width
    mutable rstring actualSub = "";

    // Subsriber is not UDP, subscribe to all publishers
    if (getMaxChannels() == 0 || getMaxChannels() == 1)
        actualSub = subscription;
    else 
        actualSub = addUDPSubscription(subscription);

    int32 rc = setInputPortImportSubscription(actualSub, 0u);
    if (rc != 0) {
       appLog(spl::Log.error, "Failed subscription (" + (rstring) rc
       + "):" + actualSub);
       assert(rc != 0, "Failed subscription (" + (rstring) rc + "):" + actualSub);
    }
    
    return rc;
}
