/* Additional includes go here */

#include "splpy.h"
#include "splpy_funcop.h"

using namespace streamsx::topology;

<%SPL::CodeGen::implementationPrologue($model);%>

<% my $pywrapfunc='source_pickle'; %>

// Constructor
MY_OPERATOR::MY_OPERATOR() :
    funcop_(NULL)
{
    funcop_ = new SplpyFuncOp(this, "<%=$pywrapfunc%>");
}

// Destructor
MY_OPERATOR::~MY_OPERATOR() 
{
    delete funcop_;
}

// Notify port readiness
void MY_OPERATOR::allPortsReady() 
{
  createThreads(1);
}
 
// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown() 
{
    funcop_->prepareToShutdown();
}

// Processing for source and threaded operators   
void MY_OPERATOR::process(uint32_t idx)
{
  PyObject *pyReturnVar = NULL;

  while(!getPE().getShutdownRequested()) {
    
    OPort0Type otuple;

    { // start lock
      SplpyGIL lock;
      if (pyReturnVar != NULL)
          Py_DECREF(pyReturnVar);

      pyReturnVar = PyObject_CallObject(funcop_->callable(), NULL);

      if (pyReturnVar == NULL) {
         throw SplpyGeneral::pythonException("source");
      }
 
      if (SplpyGeneral::isNone(pyReturnVar)) {
        Py_DECREF(pyReturnVar);
        pyReturnVar = NULL;
        break;
      }

      // Use the pointer of the pickled bytes object
      // as the blob data so we need to maintain the
      // reference count across the submit.
      // We decrement it on the next loop iteration
      // which is when we natually regain the lock.

      pySplValueUsingPyObject(otuple.get___spl_po(), pyReturnVar);

    } // end lock

    submit(otuple, 0);
  }

  if (pyReturnVar != NULL) {
     SplpyGIL lock;
     Py_DECREF(pyReturnVar);
  }
}

<%SPL::CodeGen::implementationEpilogue($model);%>
