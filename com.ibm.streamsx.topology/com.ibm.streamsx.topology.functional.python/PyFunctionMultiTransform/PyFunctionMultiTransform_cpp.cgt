/* Additional includes go here */

#include <Python.h>
#include <string>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <memory>

#include "splpy.h"

<%SPL::CodeGen::implementationPrologue($model);%>

<%
 my $attr =  $model->getInputPortAt(0)->getAttributeAt(0);
 my $pystyle = 'unk';
 if ($attr->getName() eq '__spl_po') {
    $pystyle = 'python';
 } elsif ($attr->getName() eq 'string') {
    $pystyle = 'string';
 } elsif ($attr->getName() eq 'jsonString') {
    $pystyle = 'json';
 }
%>

// Constructor
MY_OPERATOR::MY_OPERATOR() : function_(NULL), iterableObjectFunction_(NULL)
{ 
  std::string tkDir = ProcessingElement::pe().getToolkitDirectory();
  std::string streamsxDir = tkDir + "/opt/python/packages/streamsx/topology";
  std::string splpySetup = streamsxDir + "/splpy_setup.py";
  const char* spl_setup_py = splpySetup.c_str();

  streamsx::topology::Splpy::loadCPython(spl_setup_py);

  PyGILState_STATE gstate;
  gstate = PyGILState_Ensure();

    PyObject *_module_;
    PyObject *_function_;

    std::string appDirSetup = "import streamsx.topology.runtime\n";
    appDirSetup += "streamsx.topology.runtime.setupOperator(\"";
    appDirSetup += ProcessingElement::pe().getApplicationDirectory();
    appDirSetup += "\")\n";

    const char* spl_setup_appdir = appDirSetup.c_str();
    if (PyRun_SimpleString(spl_setup_appdir) != 0) {
         SPLAPPTRC(L_ERROR, "Python script splpy_setup.py failed!", "python");
         PyErr_Print();
         throw;
    }

<%
 my $module =  $model->getParameterByName("functionModule")->getValueAt(0)->getCppExpression() . '.c_str()';
 my $functionName = $model->getParameterByName("functionName")->getValueAt(0)->getCppExpression() . '.c_str()';
 my $serializedClass = $model->getParameterByName("serializedClass");
 $serializedClass = $serializedClass->getValueAt(0)->getCppExpression() . '.c_str()' if $serializedClass;
%>

    PyObject * appFunction = 
      streamsx::topology::Splpy::loadFunction(<%=$module%>, <%=$functionName%>);
    
<% if ($pystyle eq 'python') { %>
    
    <% if ($serializedClass) { %>
      Py_DECREF(appFunction);
      
      // deserialize class instance and store reference
      PyObject * depickleCallable = streamsx::topology::Splpy::loadFunction("streamsx.topology.runtime", "depickleCallable");
      PyObject * funcArg = PyTuple_New(1);
      PyTuple_SetItem(funcArg, 0, Py_BuildValue("s", <%=$serializedClass%>));
      function_ = PyObject_CallObject(depickleCallable, funcArg);
      if(function_ == 0){
        PyErr_Print();
        Py_DECREF(depickleCallable);
        Py_DECREF(funcArg);
        PyGILState_Release(gstate);
        throw;
      }
      Py_DECREF(depickleCallable);
      Py_DECREF(funcArg);
    <%} else {%>
      function_ = appFunction;
    <%}%>

    PyObject * iterableObjectFunction = 
      streamsx::topology::Splpy::loadFunction("streamsx.topology.runtime", "iterableObject");
    iterableObjectFunction_ = iterableObjectFunction;
    
<%}%>
<% if ($pystyle eq 'string') { %>
    function_ = appFunction;
<%}%>

    PyGILState_Release(gstate);
}

// Destructor
MY_OPERATOR::~MY_OPERATOR() 
{
    // Finalization code goes here
    if (function_) {
      Py_DECREF(function_);
    }
    if (iterableObjectFunction_) {
      Py_DECREF(iterableObjectFunction_);
    }
}

// Notify port readiness
void MY_OPERATOR::allPortsReady() 
{
}
 
// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown() 
{
    // This is an asynchronous call
}

// Processing for source and threaded operators   
void MY_OPERATOR::process(uint32_t idx)
{
}

// Tuple processing for mutating ports 
void MY_OPERATOR::process(Tuple & tuple, uint32_t port)
{
}

// Tuple processing for non-mutating ports
void MY_OPERATOR::process(Tuple const & tuple, uint32_t port)
{
  IPort0Type const &ip = static_cast<IPort0Type const &>(tuple);

<% if ($pystyle eq 'python') { %>
  SPL::blob value = ip.get___spl_po();
<%}%>

<% if ($pystyle eq 'string') { %>
  SPL::rstring value = ip.get_string();
<%}%>

  PyGILState_STATE gstate;
  gstate = PyGILState_Ensure();

  // convert spl blob to bytes
  PyObject * pyBytes  = streamsx::topology::Splpy::pyBlobToBytes(value);

  // prepare to call the python utility function that invokes
  // the application function and returns an iterator
  PyObject * funcArg = PyTuple_New(2);
  
  // first argument is application function or deserialized instance of callable class
  Py_INCREF(function_);
  PyTuple_SetItem(funcArg, 0, function_);
  
  // second argument is spl blob in bytes (pickled tuple)
  PyTuple_SetItem(funcArg, 1, pyBytes);
    
  // invoke python utility function and get an iterator of pickled values
  PyObject * pyIterator = PyObject_CallObject(iterableObjectFunction_, funcArg);
  Py_DECREF(funcArg);
  if (pyIterator == 0) {
    PyErr_Print();
    PyGILState_Release(gstate);
    throw;
  }
  
  std::vector<OPort0Type> output_tuples; 
  while (!getPE().getShutdownRequested()) {
    // call next() on the iterator, and get the pickled return value
    PyObject * pyPickledReturnVar = PyObject_CallObject(pyIterator, NULL);
    if (pyPickledReturnVar == Py_None){
      Py_DECREF(pyPickledReturnVar);
      Py_DECREF(pyIterator);
      break;
    } else if(pyPickledReturnVar == 0){
      PyErr_Print();
      Py_DECREF(pyIterator);
      PyGILState_Release(gstate);
      throw;
    }

    // construct spl blob and tuple from pickled return value
    long int size = PyBytes_Size(pyPickledReturnVar);
    char * bytes = PyBytes_AsString(pyPickledReturnVar);
    Py_DECREF(pyPickledReturnVar); 
    SPL::blob serializedObject((const unsigned char *)bytes, size);     
    OPort0Type otuple(serializedObject);
    output_tuples.push_back(otuple);
   
  }
  
  PyGILState_Release(gstate);
  
  // submit tuples
  for(int i = 0; i < output_tuples.size(); i++) {
    submit(output_tuples[i], 0);
  } 
  
}

// Punctuation processing
void MY_OPERATOR::process(Punctuation const & punct, uint32_t port)
{
}
<%SPL::CodeGen::implementationEpilogue($model);%>
