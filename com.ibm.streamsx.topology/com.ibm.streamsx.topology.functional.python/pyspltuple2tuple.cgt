<%
# Takes the input SPL tuple and converts it to
# as a tuple to be passed to a Python functional operator
#
# Leaves the C++ variable value set to a PyObject * tuple.

# Variables that need to be set:
# $iport - input port 
%>

  PyObject *value = 0;
  {
  SplpyGIL locktuple;
  PyObject * pyTuple = PyTuple_New(<%=$inputAttrs2Py%>);
<%
     for (my $i = 0; $i < $inputAttrs2Py; ++$i) {
         my $la = $iport->getAttributeAt($i);
         print convertAndAddToPythonTupleObject($iport->getCppTupleName(), $i, $la->getSPLType(), $la->getName());
     }
%>
<% if ($pystyle_nt) { %>
    // Wrap the tuple in an tuple to pass it to _make as iterable of values.
    PyObject *makeargs = PyTuple_New(1);
    PyTuple_SET_ITEM(makeargs, 0, pyTuple);

    pyTuple = streamsx::topology::SplpyGeneral::pyCallObject(pyNamedtupleMake_, makeargs);

<% } %>

  value = pyTuple;
  }
