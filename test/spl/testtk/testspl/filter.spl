namespace testspl;

/**
  Simple filter to test testing of
  an SPL composite.
*/
public composite Int32Filter(input In; output Out) {
    param
        attribute $attr;
        expression<int32> $value;
    graph
    stream<In> Out = Filter(In) {
       param
          filter: $attr == $value;
    }
}

/**
  Simple filter to test testing of
  an SPL operator with multiple outputs.
*/
public composite Int32FilterPF(input In; output Pass,Fail) {
    param
        attribute $attr;
        expression<int32> $value;
    graph
    (stream<In> Pass;stream<In> Fail) as F = Filter(In) {
       param
          filter: $attr == $value;
    }
}

// this is a publish that matches the 1.1.3 version
// before allow filter was added. Used for backwards
// compat testing.
public composite Publish113(input In)
{
        param
                expression<rstring> $topic ;
        graph
                () as ExportTopic = Export(In)
                {
                param
                  properties :
                  {
                     __spl_exportType = "topic",
                     __spl_topic = $topic
                  };
                }
}

type TestType = int32 id, int32 vi, int64 vl;

/**
  Simple filter to test testing of
  an SPL composite that subscribes to
  both the allow filters and not allow filters.
*/
public composite Int64SubscribeFilter(output stream<TestType> Out) {
    param
        expression<rstring> $topic;
        expression<int64> $value;
    graph
        // Import with no filtering applied.
        stream<TestType> NotFiltered = Import()
        {
        param
        // Applications with filtering disabled
          subscription :
        (__spl_exportType == "topic" && __spl_topic == $topic )
             &&
             (__spl_allowFilter == "false");
        }

        // Apply the filter on this side
        stream<TestType> FilteredAfterImport = Filter(NotFiltered) {
        param
             filter: vl == $value;
        }

        // Import with filtering sent to the Exporter
        stream<TestType> FilteredByExport = Import()
        {
        param
          subscription :
        // Applications compiled with version >= 1.2
        (__spl_exportType == "topic"
                && __spl_allowFilter == "true"
                && __spl_topic == $topic ) ;
          filter: vl == $value;
        }

        // Only needed as you cannot merge two streams into
        // a composite output port
        stream<TestType> Out = Filter(FilteredAfterImport,FilteredByExport) {
        }
}
